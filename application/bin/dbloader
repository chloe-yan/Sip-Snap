"use strict";
const mysql = require("mysql2/promise");

function displayWarningMessage(warning) {
  switch (warning.Code) {
    case 1007:
      console.log(`Skipping Database Creation --> ${warning.Message}`);
      break;
    case 1050:
      console.log(`Skipping Table Creation --> ${warning.Message}`);
      break;
  }
}

async function getConnection() {
  return await mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "0826",
  });
}

async function makeDatabase(connection) {
  const [result, _] = await connection.query(
    "CREATE DATABASE IF NOT EXISTS photodb;"
  );
  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Database!");
  }
}

async function makeUsersTable(connection) {
  const [result, _] = await connection.query(
    `
    CREATE TABLE IF NOT EXISTS photodb.users (
      id INT NOT NULL AUTO_INCREMENT,
      username VARCHAR(255) NOT NULL,
      email VARCHAR(255) NOT NULL,
      password VARCHAR(255) NOT NULL,
      avatar VARCHAR(2048) NULL,
      active INT DEFAULT 1 NOT NULL,
      createdAt DATETIME NOT NULL,
      type INT DEFAULT 1 NOT NULL,
      PRIMARY KEY(id),
      UNIQUE INDEX id_unique(id ASC) VISIBLE,
      UNIQUE INDEX username_unique(username ASC) VISIBLE,
      UNIQUE INDEX email_unique (email ASC) VISIBLE)
      ENGINE = InnoDB
    `
  );

  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Users Table!");
  }
}

async function makePostsTable(connection) {
  const [result, _] = await connection.query(
    `
    CREATE TABLE IF NOT EXISTS photodb.posts (
      id INT NOT NULL AUTO_INCREMENT,
      author_id INT NOT NULL,
      title VARCHAR(255) NOT NULL,
      content MEDIUMTEXT NOT NULL,
      photopath VARCHAR(2048) NOT NULL,
      thumbnail VARCHAR(2048) NOT NULL,
      active INT NOT NULL DEFAULT 1,
      createdAt DATETIME NOT NULL,
      PRIMARY KEY (id),
      UNIQUE INDEX id_unique(id ASC) VISIBLE,
      INDEX author_index(author_id ASC) VISIBLE,
      CONSTRAINT author
        FOREIGN KEY (author_id)
        REFERENCES photodb.users (id)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
      ENGINE = InnoDB
      `
  );
  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Posts Table!");
  }
}

async function makeCommentsTable(connection) {
  const [result, _] = await connection.query(
    ` 
    CREATE TABLE IF NOT EXISTS photodb.comments (
      id INT NOT NULL AUTO_INCREMENT,
      comment MEDIUMTEXT NOT NULL,
      comment_post_id INT NOT NULL,
      comment_author_id INT NOT NULL,
      createdAt DATETIME NOT NULL,
      UNIQUE INDEX id_unique (id ASC) VISIBLE,
      INDEX comment_author_index (comment_author_id ASC) VISIBLE,
      INDEX comment_post_index (comment_post_id ASC) VISIBLE,
      CONSTRAINT comment_author
        FOREIGN KEY (comment_author_id)
        REFERENCES photodb.users(id)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION,
      CONSTRAINT comment_post
        FOREIGN KEY (comment_post_id)
        REFERENCES photodb.posts(id)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION)
      ENGINE = InnoDB
    `
  );
  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Comments Table!");
  }
}

(async function main() {
  let connection = null;
  try {
    connection = await getConnection();
    await makeDatabase(connection);
    await connection.query("USE photodb");
    await makeUsersTable(connection);
    await makePostsTable(connection);
    await makeCommentsTable(connection);
    connection.close();
    return;
  } catch (error) {
    console.error(error);
    if (connection != null) {
      connection.close();
    }
  }
})();
